package sipmsg

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestURIParse(t *testing.T) {
	uri := SIPURIParse([]byte("sip:alice@example.com"))
	assert.NotNil(t, uri)
	assert.Equal(t, "sip", uri.Scheme())
	assert.Equal(t, "alice", uri.User())
	assert.Equal(t, "example.com", uri.Host())
	assert.Equal(t, "", uri.Params())
	assert.Equal(t, "", uri.Headers())

	uri = SIPURIParse([]byte("sips:bob:pa55w0rd@example.com:8080;user=phone;lr?X-t=foo&h=v"))
	assert.NotNil(t, uri)
	assert.Equal(t, "sips", uri.Scheme())
	assert.Equal(t, "bob", uri.User())
	assert.Equal(t, "example.com", uri.Host())
	assert.Equal(t, "8080", uri.Port())
	assert.Equal(t, "user=phone;lr", uri.Params())
	assert.Equal(t, "X-t=foo&h=v", uri.Headers())

	uri = SIPURIParse([]byte("sip:atlanta.com"))
	assert.NotNil(t, uri)
	assert.Equal(t, "sip", uri.Scheme())
	assert.Equal(t, "", uri.User())
	assert.Equal(t, "", uri.Password())
	assert.Equal(t, "atlanta.com", uri.Host())
	assert.Equal(t, "", uri.Port())
	assert.Equal(t, "", uri.Params())
	assert.Equal(t, "", uri.Headers())

	uri = SIPURIParse([]byte("sip:alice:secretword@atlanta.com:8860;transport=tcp"))
	assert.NotNil(t, uri)
	assert.Equal(t, "sip", uri.Scheme())
	assert.Equal(t, "alice", uri.User())
	assert.Equal(t, "secretword", uri.Password())
	assert.Equal(t, "atlanta.com", uri.Host())
	assert.Equal(t, "8860", uri.Port())
	assert.Equal(t, "transport=tcp", uri.Params())
	assert.Equal(t, "", uri.Headers())
	val, ok := uri.Header("X-rpid")
	assert.False(t, ok)
	assert.Equal(t, "", val)

	uri = SIPURIParse([]byte("sips:alice@atlanta.com?subject=project%20x&priority=urgent"))
	assert.NotNil(t, uri)
	assert.Equal(t, "sips", uri.Scheme())
	assert.Equal(t, "alice", uri.User())
	assert.Equal(t, "", uri.Password())
	assert.Equal(t, "atlanta.com", uri.Host())
	assert.Equal(t, "", uri.Params())
	val, ok = uri.Param("maddr")
	assert.False(t, ok)
	assert.Equal(t, "", val)
	assert.Equal(t, "subject=project%20x&priority=urgent", uri.Headers())

	uri = SIPURIParse([]byte("sip:+1-212-555-1212:1234@gateway.com;user=phone"))
	assert.NotNil(t, uri)
	assert.Equal(t, "sip", uri.Scheme())
	assert.Equal(t, "+1-212-555-1212", uri.User())
	assert.Equal(t, "1234", uri.Password())
	assert.Equal(t, "gateway.com", uri.Host())
	assert.Equal(t, "user=phone", uri.Params())
	assert.Equal(t, "", uri.Headers())

	uri = SIPURIParse([]byte("sips:1212@gateway.com"))
	assert.NotNil(t, uri)
	assert.Equal(t, "sips", uri.Scheme())
	assert.Equal(t, "1212", uri.User())
	assert.Equal(t, "", uri.Password())
	assert.Equal(t, "gateway.com", uri.Host())
	assert.Equal(t, "", uri.Params())
	assert.Equal(t, "", uri.Headers())

	uri = SIPURIParse([]byte("sip:alice@192.0.2.4:9090?User-Agent=SIPP"))
	assert.NotNil(t, uri)
	assert.Equal(t, "192.0.2.4", uri.Host())
	assert.Equal(t, "9090", uri.Port())
	assert.Equal(t, "", uri.Params())
	assert.Equal(t, "User-Agent=SIPP", uri.Headers())

	uri = SIPURIParse([]byte("sip:alice@192.0.2.4:9090"))
	assert.NotNil(t, uri)
	assert.Equal(t, "sip", uri.Scheme())
	assert.Equal(t, "alice", uri.User())
	assert.Equal(t, "", uri.Password())
	assert.Equal(t, "192.0.2.4", uri.Host())
	assert.Equal(t, "9090", uri.Port())
	assert.Equal(t, "", uri.Params())
	assert.Equal(t, "", uri.Headers())

	uri = SIPURIParse([]byte("sip:atlanta.com;method=REGISTER?to=alice%40atlanta.com"))
	assert.NotNil(t, uri)
	assert.Equal(t, "sip", uri.Scheme())
	assert.Equal(t, "", uri.User())
	assert.Equal(t, "", uri.Password())
	assert.Equal(t, "atlanta.com", uri.Host())
	assert.Equal(t, "method=REGISTER", uri.Params())
	assert.Equal(t, "to=alice%40atlanta.com", uri.Headers())

	uri = SIPURIParse([]byte("sip:alice;day=tuesday@atlanta.com"))
	assert.NotNil(t, uri)
	assert.Equal(t, "sip", uri.Scheme())
	assert.Equal(t, "alice;day=tuesday", uri.User())
	assert.Equal(t, "", uri.Password())
	assert.Equal(t, "atlanta.com", uri.Host())
	assert.Equal(t, "", uri.Params())
	assert.Equal(t, "", uri.Headers())

	uri = SIPURIParse([]byte("sip:@atlanta.com"))
	assert.Nil(t, uri)

	uri = SIPURIParse([]byte("sip::"))
	assert.Nil(t, uri)

	uri = SIPURIParse([]byte("localhost"))
	assert.Nil(t, uri)

	uri = SIPURIParse([]byte("alice@atlanta.com"))
	assert.Nil(t, uri)

	uri = SIPURIParse([]byte("sip:alice@atlanta.com:-4"))
	assert.Nil(t, uri)
}

func TestURIParseHeaders(t *testing.T) {
	uri := SIPURIParse([]byte("sip:bob@example.com?Foo=1&X-Bar=email"))
	assert.NotNil(t, uri)
	assert.Equal(t, "sip", uri.Scheme())
	assert.Equal(t, "bob", uri.User())
	assert.Equal(t, "", uri.Password())
	assert.Equal(t, "example.com", uri.Host())
	assert.Equal(t, "", uri.Port())
	assert.Equal(t, "", uri.Params())
	assert.Equal(t, "Foo=1&X-Bar=email", uri.Headers())
	val, exists := uri.Header("Foo")
	assert.True(t, exists)
	assert.Equal(t, "1", val)
	val, exists = uri.Header("x-bar")
	assert.True(t, exists)
	assert.Equal(t, "email", val)

	uri = SIPURIParse([]byte("sip:bob@example.com?r=0"))
	assert.NotNil(t, uri)
	val, exists = uri.Header("r")
	assert.True(t, exists)
	assert.Equal(t, "0", val)

	uri = SIPURIParse([]byte("sip:example.com?User=bob&agent=4435&+cic=&r=none&w=&Country=ca"))
	assert.NotNil(t, uri)
	val, exists = uri.Header("user")
	assert.True(t, exists)
	assert.Equal(t, "bob", val)
	val, exists = uri.Header("Agent")
	assert.True(t, exists)
	assert.Equal(t, "4435", val)
	val, exists = uri.Header("+cic")
	assert.True(t, exists)
	assert.Equal(t, "", val)
	val, exists = uri.Header("r")
	assert.True(t, exists)
	assert.Equal(t, "none", val)
	val, exists = uri.Header("w")
	assert.True(t, exists)
	assert.Equal(t, "", val)
	val, exists = uri.Header("Country")
	assert.True(t, exists)
	assert.Equal(t, "ca", val)
	val, exists = uri.Header("user-agent")
	assert.False(t, exists)

	uri = SIPURIParse([]byte("sip:example.com?foo="))
	assert.NotNil(t, uri)
	val, exists = uri.Header("foo")
	assert.True(t, exists)
	val, exists = uri.Header("user")
	assert.False(t, exists)
}

func BenchmarkURIParsSimple(b *testing.B) {
	for i := 0; i < b.N; i++ {
		SIPURIParse([]byte("sips:bob:pa55w0rd@example.com:8080;user=phone?X-t=foo"))
	}
}
